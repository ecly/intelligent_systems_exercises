AUTHOR: ecly@itu.dk

1)
Backward chaining is good for finding a state that fulfills a given set of criteria.
Forward chaining is good for infering results given an initial set of conditions.

2)
Professor Smart's algorithm CANNOT tell if KB |= A.

His algorithm can not check this as it will instead infinitely loop
between checking the clauses:

C => G
B ^ E ^ G => C

We don't know whether C or G is true, as such we look for clauses concluding
C or G. C and G exist in the conclusion of only these 2 clauses, and as such
will loop indefinitely between them.

To fix this, we could extend the algorithm to keep track of clauses already,
and similarly values known to be true. With that extension we should never have
to evaluate clauses twice and in the case where we run out of clauses with either
C og G in the conclusion, we can simply return false.

This also relates to running time solution described in 3.

3)
Professor Smart's algorithm does not run in linear time, as it may try to entail
whether the KB satisfies a given clause up to 'n' times, where n is the number of horn-clauses.

As such the current version of Smart's algorithm runs in O(n^2). Using dynamic programming
we can trivially reduce this to O(n).
